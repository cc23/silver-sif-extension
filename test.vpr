lockType MyLock {
  type Int
  invariant(l, v) = [l.f |-> v]
  secInvariant(v) = low(v)
  actions = [(add,Int,Int,duplicable)]

  action add(v, arg)  
    requires arg > 0 && low(arg)
    ensures low(result)
  {(v + arg), arg}
}


field f : Int

method m(r: Ref, q: Ref, l: Lock, t: Thread)
  requires [r.f |-> ?n && n > 13] && lock[MyLock](l, 1/2) && locked[MyLock](l, 34) && joinable[m](t) //&& guard[MyLock](add, l)
  ensures [r.f |-> ?n && n > 1 && n < 3]
{
  r.f := 3
}
